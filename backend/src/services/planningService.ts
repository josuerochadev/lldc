import prisma from "../prisma";
import { AppError } from "../middlewares/errorHandler";
import logger from "../middlewares/logger";

/**
 * ğŸ”¹ VÃ©rifie si un crÃ©neau est valide avant de le bloquer
 */
export const validateBlockedSlot = async (
	start_date: string,
	end_date: string,
) => {
	const startDate = new Date(start_date);
	const endDate = new Date(end_date);

	if (startDate >= endDate) {
		throw new AppError("La date de fin doit Ãªtre aprÃ¨s la date de dÃ©but.", 400);
	}

	if (startDate < new Date()) {
		throw new AppError("Impossible de bloquer un crÃ©neau dans le passÃ©.", 400);
	}

	// VÃ©rification de conflit avec d'autres crÃ©neaux bloquÃ©s
	const overlappingBlockedSlots = await prisma.blockedSlot.findMany({
		where: {
			OR: [{ start_date: { lte: endDate }, end_date: { gte: startDate } }],
		},
	});

	if (overlappingBlockedSlots.length > 0) {
		throw new AppError("Un autre crÃ©neau bloquÃ© chevauche cette pÃ©riode.", 400);
	}

	return { startDate, endDate };
};

/**
 * ğŸ”¹ CrÃ©ation d'un crÃ©neau bloquÃ©
 */
export const createBlockedSlot = async (
	start_date: string,
	end_date: string,
) => {
	logger.info(
		`ğŸ›‘ Tentative de blocage d'un crÃ©neau : ${start_date} â†’ ${end_date}`,
	);

	const { startDate, endDate } = await validateBlockedSlot(
		start_date,
		end_date,
	);

	const blockedSlot = await prisma.blockedSlot.create({
		data: {
			start_date: startDate,
			end_date: endDate,
		},
	});

	logger.info(
		`âœ… CrÃ©neau bloquÃ© du ${startDate} au ${endDate}, ID: ${blockedSlot.id}`,
	);
	return blockedSlot;
};

/**
 * ğŸ”¹ RÃ©cupÃ©ration de tous les crÃ©neaux bloquÃ©s
 */
export const getBlockedSlots = async () => {
	logger.info("ğŸ“… RÃ©cupÃ©ration des crÃ©neaux bloquÃ©s...");
	return await prisma.blockedSlot.findMany({
		orderBy: { start_date: "asc" },
	});
};
