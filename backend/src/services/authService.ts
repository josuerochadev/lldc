import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import prisma from "../prisma";
import { ENV } from "../config/env";
import { AppError } from "../middlewares/errorHandler";
import logger from "../middlewares/logger";

const JWT_SECRET = ENV.JWT_SECRET;

// ğŸ“Œ Fonction pour hacher le mot de passe
export const hashPassword = async (password: string) => {
	return await bcrypt.hash(password, 10);
};

// ğŸ“Œ Fonction pour comparer les mots de passe
export const comparePasswords = async (
	password: string,
	hashedPassword: string,
) => {
	return await bcrypt.compare(password, hashedPassword);
};

// ğŸ“Œ GÃ©nÃ©rer un token JWT
export const generateToken = (opticianId: number) => {
	return jwt.sign({ id: opticianId }, JWT_SECRET, { expiresIn: "8h" });
};

// ğŸ“Œ Connexion de l'utilisateur
export const loginUser = async (email: string, password: string) => {
	logger.info(`ğŸŸ¢ Tentative de connexion pour l'email : ${email}`);

	const optician = await prisma.optician.findUnique({ where: { email } });

	if (!optician) {
		logger.warn(`ğŸ”´ Connexion Ã©chouÃ©e : opticien non trouvÃ© (${email})`);
		throw new AppError("Identifiants incorrects", 401);
	}

	const isValidPassword = await comparePasswords(password, optician.password);
	if (!isValidPassword) {
		logger.warn(`ğŸ”´ Connexion Ã©chouÃ©e : mot de passe incorrect (${email})`);
		throw new AppError("Identifiants incorrects", 401);
	}

	const token = generateToken(optician.id);
	logger.info(`âœ… Connexion rÃ©ussie : opticien ID ${optician.id}`);
	return token;
};

// ğŸ“Œ DÃ©connexion (ajout du token Ã  la liste noire)
export const logoutUser = async (token: string) => {
	logger.info("ğŸšª Tentative de dÃ©connexion");

	await prisma.blacklistedToken.create({
		data: { token },
	});

	logger.info("âœ… DÃ©connexion rÃ©ussie, token mis en liste noire");
};
